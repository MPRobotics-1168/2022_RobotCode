// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.MotorCage;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand extends CommandBase {
    //cetner auton
    public int moveCounter;
    public int maxMoves;
    public int shotCounter;
    public int maxShots;

    public static MotorCage motorcage;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutonomousCommand() {
    
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

        //default variables
        moveCounter = 1000;
        maxMoves = 70;
        shotCounter = 0;
        maxShots = 100;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

//shotCounter begins cycling through as robot shoots until it reaches maxShots
    if(shotCounter < maxShots){
        Robot.motorcage.shoot_start();
        Robot.motorcage.Intake_start();
        Robot.motorcage.BottomConveyor_start();
        Robot.motorcage.TopConveyor_start();
        shotCounter++;
    }
/*Once shotCounter == maxShots, robot stops shooting, sets the moveCounter to 0, 
and sets the shotCounter to one above maxShots to close the loop */
    if(shotCounter == maxShots){
        Robot.motorcage.shoot_stop();
        Robot.motorcage.Intake_stop();
        Robot.motorcage.BottomConveyor_stop();
        Robot.motorcage.TopConveyor_stop();
        moveCounter = 0;
        shotCounter = maxShots +1;
    }
//moveCounter begins cycling through and moving backwards until it reached maxMoves
    if(moveCounter < maxMoves){
        DriveTrain.mecanumDrive1.driveCartesian(-.3,0,0);
        moveCounter++;
    }
//Once moveCounter == maxMoves, robot stops
    if(moveCounter == maxMoves){
        DriveTrain.mecanumDrive1.driveCartesian(0,0,0);
    }  
    
//end of autonomous
} 


    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
