// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.MotorCage;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand1 extends CommandBase {
    //center auton
    public int reloadCounter;
    public int maxReturn;
    public int loadCounter;
    public int loadMax;
    public int pause1Counter;
    public int pause2Counter;
    public int maxPause2;
    public int maxPause;
    public int goBackCounter;
    public int strafeleftCounter;
    public int straferightCounter;
    public int maxStrafe;
    public int moveCounter;
    public int moveBackCounter;
    public int maxMoves;
    public int maxMovesTaxiTime;
    public int shotCounter;
    public int shotBackCounter;
    public int maxShots;
    
    //right auton
    public int loadMaxRight;
    public int maxMovesRight;
    public int maxMovesRightBack;
    public int maxStrafeRight;
    public int maxTurnRight;
    public int turnrightRightCounter;
    public int maxReloadRight;
    public int turnleftRightCounter;
    public int pause3Counter;
    public int pause4Counter;
    public int maxStrafeRight2;

    public static MotorCage motorcage;
    public boolean shotTime;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutonomousCommand1() {
    
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

        //right tarmac auton
        reloadCounter = 1000;
        loadCounter = 1000;
        loadMax = 30;
        maxPause2 = 30;
        maxPause = 100;
        pause1Counter = 1000;
        pause2Counter = 1000;
        strafeleftCounter = 1000;
        straferightCounter = 1000;
        maxStrafe = 69;
        moveCounter = 1000;
        moveBackCounter = 1000;
        goBackCounter = 1000;
        maxReturn = 50;
        maxMoves = 25;
        maxMovesTaxiTime = 50;
        shotCounter = 0;
        shotBackCounter = 1000;
        maxShots = 100;

        motorcage = new MotorCage();
        

        //right tarmac auton
        maxMovesRight = 110;
        maxMovesRightBack = 95;
        maxStrafeRight = 122;
        maxTurnRight = 7;
        turnrightRightCounter = 1000;
        loadMaxRight = 15;
        maxReloadRight = 10;
        turnrightRightCounter = 1000;
        pause3Counter = 1000;
        pause4Counter = 1000;
        turnleftRightCounter = 1000;
        maxStrafeRight2 = 115;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        
//right auton
//shotCounter begins cycling through as robot shoots until it reaches maxShots 
    if(shotCounter < maxShots){
        DriveTrain.mecanumDrive1.driveCartesian(0,0,0);
        Robot.motorcage.shoot_start();
        Robot.motorcage.Intake_start();
        Robot.motorcage.BottomConveyor_start();
        Robot.motorcage.TopConveyor_start();
        shotCounter++;
    }  
/*Once shotCounter == maxShots, robot stops shooting, sets the moveCounter to 0, 
and sets the shotCounter to one above maxShots to close the loop */
    if(shotCounter == maxShots){
        Robot.motorcage.shoot_stop();
        Robot.motorcage.Intake_stop();
        Robot.motorcage.BottomConveyor_stop();
        Robot.motorcage.TopConveyor_stop();
        moveCounter = 0;
        shotCounter = maxShots +1;
    }

//backs up
    if(moveCounter < maxMovesRight){
        DriveTrain.mecanumDrive1.driveCartesian(-.3,0,0);
        moveCounter++;
        Robot.motorcage.Intake_start();
        Robot.motorcage.BottomConveyor_start();
    }
//stops backing up
    if(moveCounter == maxMovesRight){
        DriveTrain.mecanumDrive1.driveCartesian(.0,0,0);
        moveCounter++;
        pause1Counter = 0;
    }  

    if(pause1Counter < maxPause){
        DriveTrain.mecanumDrive1.driveCartesian(.0,0,0);
        pause1Counter++;  
    }

    if(pause1Counter == maxPause){
        moveBackCounter = 0;
        pause1Counter++;
    }

//move back and spin intake
    if(moveBackCounter < maxMovesRightBack){
        DriveTrain.mecanumDrive1.driveCartesian(.3,0,.053);
        moveBackCounter++;
    }
//move forward, continue bottom conveyor spinning
    if(moveBackCounter == maxMovesRightBack){
        DriveTrain.mecanumDrive1.driveCartesian(0,0,0);
        Robot.motorcage.Intake_stop();
        moveBackCounter++;
        shotBackCounter = 0;
    }

    if(shotBackCounter < maxShots){
        shotBackCounter++;
        Robot.motorcage.shoot_start();
        Robot.motorcage.Intake_start();
        Robot.motorcage.BottomConveyor_start();
        Robot.motorcage.TopConveyor_start();
    }

    if(shotBackCounter == maxShots){
        Robot.motorcage.shoot_stop();
        Robot.motorcage.Intake_stop();
        Robot.motorcage.BottomConveyor_stop();
        Robot.motorcage.TopConveyor_stop(); 
        goBackCounter = 0;
        shotBackCounter++;
    }

    if(goBackCounter < maxMovesTaxiTime){
        DriveTrain.mecanumDrive1.driveCartesian(-.3,0,0); 
        goBackCounter++;
    }

    if(goBackCounter == maxMovesTaxiTime){
        DriveTrain.mecanumDrive1.driveCartesian(0,0,0);
        goBackCounter++;
    } 
} 


    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
